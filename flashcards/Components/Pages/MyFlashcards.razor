@page "/myFlashcards"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@using shared.Dtos
@using shared.Enums
@using System.Text.Json
@using Blazored
@using flashcards.Components.Layout
@rendermode InteractiveServer

<h3>My Collections</h3>

@if (!loaded)
{
    <p>Loading...</p>
}
else if (!isLoggedIn)
{
    <p>Please <a href="/login">log in</a> to create new collections.</p>
}
else
{
    <div class="new-collection-container">
        <button class="btn btn-primary" @onclick="CreateNewCollection">+ New Collection</button>
    </div>

    @if (flashcardsCollections != null && flashcardsCollections.Any())
    {
        <div class="card-grid">
            @foreach (var collection in flashcardsCollections)
            {
                <div class="card flashcard">
                    <div class="card-body">
                        <h5 class="card-title">@collection.Name</h5>
                        <p class="card-text">@collection.Description</p>
                        <div class="card-buttons">
                            <button class="btn btn-secondary" @onclick="() => EditCollection(collection.Id)">Edit</button>
                            <button class="btn btn-primary" @onclick="() => OpenStudyDialog(collection.Id)">Study</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <p>No collections found.</p>
    }
}
@if (showStudyDialog)
{
    <StudyModeDialog OnModeSelected="StartStudySession" OnClose="CloseStudyDialog" />
}


@code {
    private List<FlashcardsCollectionDto> flashcardsCollections;
    private bool loaded;
    private bool isLoggedIn;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !loaded)
        {
            try
            {
                var token = await localStorageService.GetTokenAsync("authToken");

                isLoggedIn = !string.IsNullOrWhiteSpace(token);
                if (!isLoggedIn)
                {
                    loaded = true;
                    StateHasChanged();
                    return;
                }

                var apiUrl = "http://localhost:5215/api/flashcardsCollection";
                var request = new HttpRequestMessage(HttpMethod.Get, apiUrl);
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stream = await response.Content.ReadAsStreamAsync();
                    flashcardsCollections = await JsonSerializer.DeserializeAsync<List<FlashcardsCollectionDto>>(stream, new
                    JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                }
                else
                {
                    Console.WriteLine($"Failed to fetch flashcards. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}");
                }

                loaded = true;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }

    private void CreateNewCollection()
    {
        NavigationManager.NavigateTo("/newCollection");
    }

    private async Task DeleteCollectionAsync(int collectionId)
    {
        try
        {
            var apiUrl = $"http://localhost:5215/api/flashcardsCollection/{collectionId}";

            var response = await Http.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                flashcardsCollections.RemoveAll(c => c.Id == collectionId);
            }
            else
            {
                Console.WriteLine($"Failed to delete collection. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
    private void EditCollection(int id)
    {
        NavigationManager.NavigateTo($"/editCollection/{id}");
    }

    private bool showStudyDialog = false;
    private int selectedCollectionId;

    private void OpenStudyDialog(int collectionId)
    {
        selectedCollectionId = collectionId;
        showStudyDialog = true;
    }

    private void CloseStudyDialog()
    {
        showStudyDialog = false;
    }

    @* private void StartStudySession(string mode)
    {
        NavigationManager.NavigateTo($"/study/{selectedCollectionId}/{mode}");
    } *@

    private async Task StartStudySession(string mode)
    {
        var startRequest = new StartSessionRequestDto
        {
            CollectionId = selectedCollectionId,
            StudySessionMode = Enum.TryParse<StudySessionMode>(mode, ignoreCase: true, out var parsedMode) 
                ? parsedMode 
                : StudySessionMode.BasicReview
        };

        try
        {
            var apiUrl = "http://localhost:5215/api/studySession";
            var response = await Http.PostAsJsonAsync(apiUrl, startRequest);

            if (response.IsSuccessStatusCode)
            {
                var session = await response.Content.ReadFromJsonAsync<StudySessionDto>();
                NavigationManager.NavigateTo($"/flashcards/{session.Id}");
            }
            else
            {
                Console.WriteLine($"Failed to start session. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }

        showStudyDialog = false;  // Close dialog after starting session
    }
}
