@page "/myFlashcards"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject LocalStorageService localStorageService
@using shared.Dtos
@using System.Text.Json
@rendermode InteractiveServer

<h3>My Flashcards Collections</h3>
<div class="new-collection-container">
    <button class="btn btn-primary" @onclick="CreateNewCollection">New Collection</button>
</div>

@if (flashcardsCollections != null && flashcardsCollections.Any())
{
    <table class="table">
        <thead>
            <tr>
                <th>Collection Name</th>
                <th>Owner ID</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var collection in flashcardsCollections)
            {
                <tr>
                    <td>@collection.Name</td>
                    <td>@collection.OwnerId</td>
                    <td>@collection.Description</td>
                    <td>
                        <a href="/editCollection/@collection.Id">Edit</a> | <button class="btn btn-danger"
                            @onclick="() => DeleteCollectionAsync(collection.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>No collections found.</p>
}

@code {
    private List<FlashcardsCollectionDto> flashcardsCollections;
    private bool _loaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_loaded)
        {
            try
            {
                var token = await localStorageService.GetTokenAsync("authToken");
                if (string.IsNullOrWhiteSpace(token))
                {
                    Console.WriteLine("No token found.");
                    return;
                }

                var apiUrl = "http://localhost:5215/api/flashcardsCollection";
                var request = new HttpRequestMessage(HttpMethod.Get, apiUrl);
                request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

                var response = await Http.SendAsync(request);

                if (response.IsSuccessStatusCode)
                {
                    var stream = await response.Content.ReadAsStreamAsync();
                    flashcardsCollections = await JsonSerializer.DeserializeAsync<List<FlashcardsCollectionDto>>(stream, new JsonSerializerOptions
                    {
                        PropertyNameCaseInsensitive = true
                    });
                }
                else
                {
                    Console.WriteLine($"Failed to fetch flashcards. Status: {response.StatusCode}, Reason: {response.ReasonPhrase}");
                }

                _loaded = true;
                StateHasChanged(); // Re-render the component after the data is fetched
            }
            catch (Exception ex)
            {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        }
    }

    private void CreateNewCollection()
    {
        NavigationManager.NavigateTo("/newCollection");
    }

    private async Task DeleteCollectionAsync(int collectionId)
    {
        try
        {
            var apiUrl = $"http://localhost:5215/api/flashcardsCollection/{collectionId}";

            var response = await Http.DeleteAsync(apiUrl);

            if (response.IsSuccessStatusCode)
            {
                flashcardsCollections.RemoveAll(c => c.Id == collectionId);
            }
            else
            {
                Console.WriteLine($"Failed to delete collection. Status: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }
}
