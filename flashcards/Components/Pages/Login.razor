@page "/login"
@inject LocalStorageService localStorage
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode RenderMode.InteractiveServer

<EditForm Model="@userDto" OnValidSubmit="HandleLogin" FormName="loginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label>Username</label>
        <InputText class="form-control" @bind-Value="userDto.Username" />
    </div>
    <div class="mb-3">
        <label>Password</label>
        <InputText type="password" class="form-control" @bind-Value="userDto.Password" />
    </div>
    <button class="btn btn-primary" type="submit">Login</button>
</EditForm>

@code {
    private string? ErrorMessage;
    private string? authToken;

    private const string tokenKey = "authToken";

    private UserDto userDto = new UserDto
    {
        Username = "antanas",
        Password = "antanas"
    };

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;
        try
        {
            var response = await Http.PostAsJsonAsync("http://localhost:5215/api/auth/login", userDto);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                authToken = result?.Token;

                localStorage.SetTokenAsync(tokenKey, authToken);

                @* Navigation.NavigateTo("/"); *@
            }
            else
            {
                var error = await response.Content.ReadFromJsonAsync<ErrorResponse>();
                ErrorMessage = error?.Message ?? "Login failed.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await localStorage.GetTokenAsync(tokenKey);
        }
    }

    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }

    public class ErrorResponse
    {
        public string Message { get; set; } = string.Empty;
    }
}