@page "/flashcards/{studySessionId}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using shared.Dtos
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Study Session</PageTitle>

<h3>Flashcard Study Session</h3>

@if (flashcard == null)
{
    <p>Loading...</p>
}
else
{
    <div class="flashcard-container">
        <div class="flashcard-container">
            <div class="flashcard @(isFlipped ? "flipped" : "")" @onclick="FlipCard">
                <div class="front">
                    <p>@flashcard.Flashcard.Question</p>
                </div>
                <div class="back">
                    <p>@flashcard.Flashcard.Answer</p>
                </div>
            </div>
        </div>

        <div class="button-group">
            <button class="btn btn-success" @onclick="() => RegisterAnswer(true)">Correct</button>
            <button class="btn btn-danger" @onclick="() => RegisterAnswer(false)">Incorrect</button>
        </div>
    </div>
}

@code {
    [Parameter]
    public string studySessionId { get; set; }

    private int parsedStudySessionId;

    private StudySessionFlashcardDto flashcard;
    private bool isFlipped = false;
    private ElementReference flashcardElement;

    protected override async Task OnInitializedAsync()
    {
        await GetNextFlashcard();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (int.TryParse(studySessionId, out var id))
        {
            parsedStudySessionId = id;
        }
        else
        {
            Console.WriteLine("Invalid studySessionId.");
        }

        await base.OnParametersSetAsync();
    }

    private async Task GetNextFlashcard()
    {
        var apiUrl = $"http://localhost:5215/api/studySession/{studySessionId}/next-flashcard";

        try
        {
            var response = await Http.GetAsync(apiUrl);

            if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
            {
                NavigationManager.NavigateTo("/myflashcards");
                return;
            }

            if (response.IsSuccessStatusCode)
            {
                flashcard = await response.Content.ReadFromJsonAsync<StudySessionFlashcardDto>();
            }
            else
            {
                Console.WriteLine($"Unexpected response status: {response.StatusCode}");
                NavigationManager.NavigateTo("/myflashcards");
            }
        }
        catch (Exception ex)
        {
            NavigationManager.NavigateTo("/myflashcards");
        }

        StateHasChanged();
    }

    private async Task RegisterAnswer(bool isCorrect)
    {
        if (flashcard != null)
        {
            var apiUrl =
            $"http://localhost:5215/api/studySession/{studySessionId}/flashcards/{flashcard.FlashcardId}/answer?isCorrect={isCorrect}";
            await Http.PostAsync(apiUrl, null);
            await GetNextFlashcard();
        }
    }

    private void FlipCard()
    {
        isFlipped = !isFlipped;
        StateHasChanged();
    }

}

<style>
    h3 {
        text-align: center;
        margin-top: 1.5rem;
    }
    
    .flashcard-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-top: 2rem;
    }

    .flashcard {
        width: 350px;
        height: 250px;
        perspective: 1000px;
        cursor: pointer;
        margin-bottom: 1.5rem;
    }

    .flashcard>.front,
    .flashcard>.back {
        width: 100%;
        height: 100%;
        position: absolute;
        border-radius: 16px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
        display: flex;
        align-items: center;
        justify-content: center;
        backface-visibility: hidden;
        transition: transform 0.6s ease-in-out;
        padding: 20px;
        text-align: center;
        font-size: 1.2rem;
        font-weight: 500;
        background-color: white;
    }

    .flashcard>.back {
        transform: rotateY(180deg);
        background-color: #f9f9f9;
        color: #333;
    }

    .flashcard {
        position: relative;
        transform-style: preserve-3d;
        transition: transform 0.6s ease-in-out;
    }

    .flashcard.flipped {
        transform: rotateY(180deg);
    }

    .button-group {
        display: flex;
        gap: 1rem;
    }

    .btn {
        padding: 10px 16px;
        font-size: 1rem;
        font-weight: 600;
    }
</style>
